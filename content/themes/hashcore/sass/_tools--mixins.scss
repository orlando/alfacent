@mixin placeholder-styles {
  ::-webkit-input-placeholder {@content;}
  ::-moz-placeholder {@content;}
  :-moz-placeholder {@content;}
  :-ms-input-placeholder {@content;}
}

@mixin keyframe-animation($animation-name) {
  @-webkit-keyframes #{$animation-name} { @content; }
  @-moz-keyframes #{$animation-name} { @content; }
  @-o-keyframes #{$animation-name} { @content; }
  @keyframes #{$animation-name} { @content; }
}

@mixin dimension($dimension) {
  height: $dimension;
  width: $dimension;
}

@mixin children-based-layout($min: 1, $max: 5, $selector: 'div') {
  // when there are more than the children expected
  // set the width to the $max variable to keep the
  // layout as expected, otherwise this width will be
  // overwritten for the matched rules.
  #{$selector} {
    width: 100%/$max;
  }

  @for $i from $min through $max {
    #{$selector}:first-child:nth-last-child(#{$i}),
    #{$selector}:first-child:nth-last-child(#{$i}) ~ #{$selector} {
      width: 100%/$i;
    }
  }
}

@mixin blur-effect {
  -webkit-filter: blur(2px);
  filter: blur(2px);
}

@mixin bring-it-front {
  z-index: 1;
}

@mixin fade-out($speed: .216s, $transition-function: linear) {
  opacity: 0;
  transition: visibility 0s $speed, opacity $speed $transition-function;
  visibility: hidden;
}

@mixin fade-in($speed: .216s, $transition-function: linear) {
  opacity: 1;
  transition: opacity $speed $transition-function;
  visibility: visible;
}

@mixin comes-out($x: 0, $y: 0, $speed: .216s, $transition-function: ease) {
  transition: transform $speed $transition-function;
  transform: translate3d($x, $y, 0);
}

@mixin comes-in($x: 0, $y: 0, $speed: .216s, $transition-function: ease) {
  transition: transform $speed $transition-function;
  transform: translate3d($x, $y, 0);
}

@mixin fontawesome-icon($name) {
  &::before {
    display: inline-block;
    font: normal normal normal 14px/1 FontAwesome;
    font-size: inherit;
    text-rendering: auto;
    transform: translate(0, 0);
  }

  @extend .fa-#{$name};
}

@mixin overlay($background: $custom-black, $opacity: .75, $top: 0, $right: 0, $bottom: 0, $left: 0) {
  background-color: $background;
  bottom: $bottom;
  left: $left;
  position: absolute;
  right: $right;
  top: $top;
  opacity: $opacity;
}

@mixin table-align($align: middle, $target: false) {
  display: table;
  height: 100%;

  @if $target {
    > #{$target} {
      display: table-cell;
      vertical-align: $align;
    }
  } @else {
    > *:first-child {
      display: table-cell;
      vertical-align: $align;
    }
  }
}

@mixin triangle-down($side: 10px, $color: $gray) {
  width: 0;
  height: 0;
  border-left: $side solid transparent;
  border-right: $side solid transparent;

  border-top: $side solid $color;
}

@mixin simple-transition($speed: $default-speed-transition) {
  transition: all ease-out $speed;
}

@mixin list-reset() {
  padding: 0;
  margin: 0;
  list-style-type: none;
}

@mixin list-inline($gutter: $space*1.5) {
  > li {
    display: inline-block;

    & + li {
      margin-left: $gutter;
    }
  }
}

@mixin set-helper($class, $sufix: false) {
  @if $sufix {
    $sufix: '-#{$sufix}';
  } @else {
    $sufix: '';
  }

  #{$class}#{$sufix} {
    @content;
  }

  #{$class}-xs#{$sufix} {
    @media #{$just-small-resolutions} {
      @content;
    }
  }

  #{$class}-sm#{$sufix} {
    @media #{$from-small-resolutions} {
      @content;
    }
  }

  #{$class}-md#{$sufix} {
    @media #{$from-medium-resolutions} {
      @content;
    }
  }

  #{$class}-lg#{$sufix} {
    @media #{$from-large-resolutions} {
      @content;
    }
  }
}

@mixin material-layer($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `material-layer`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}
